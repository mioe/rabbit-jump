import Phaser from 'phaser'
import Carrot from './Carrot'

export default class Game extends Phaser.Scene {
  /* –ü–æ–¥–≤–∏–∂–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º —É–ø—Ä–∞–≤–ª—è—Ç—å */
  player!: Phaser.Physics.Arcade.Sprite
  /* –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ */
  platforms!: Phaser.Physics.Arcade.StaticGroup
  /* –°—á–µ—Ç—á–∏–∫ –æ—á–∫–æ–≤ */
  carrotsCollected = 0
  carrotsCollectedText!: Phaser.GameObjects.Text
  carrotsCollectedWorldRecord!: Phaser.GameObjects.Text
  goodLuckText!: Phaser.GameObjects.Text
  authorText!: Phaser.GameObjects.Text
  /* –£–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º */
  cursors!: Phaser.Types.Input.Keyboard.CursorKeys
  /* –û–±—ä–µ–∫—Ç */
  carrots!: Phaser.Physics.Arcade.Group

  constructor() {
    super('game')
  }

  init(): void {
    console.log('ü¶ï init')
    this.carrotsCollected = 0
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
   */
  preload(): void {
    console.log('ü¶ï preload')

    /* –°–ª–µ–¥–∏–º –∑–∞ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–ª–∞–≤–∏—à */
    this.cursors = this.input.keyboard.createCursorKeys()

    this.load.image('platform', 'assets/textures/ground_cake.png')

    this.load.image('bunny-stand', 'assets/textures/bunny2_stand.png')
    this.load.image('bunny-jump', 'assets/textures/bunny2_jump.png')
    this.load.audio('jump', 'assets/audio/phaseJump1.ogg')

    this.load.image('carrot', 'assets/textures/carrot.png')
  }

  create(): void {
    console.log('ü¶ï create')

    /* –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º */
    this.platforms = this.physics.add.staticGroup()
    for (let i = 0; i < 5; ++i) {
      const x = Phaser.Math.Between(90, 313)
      const y = 150 * i

      /** @type {Phaser.Physics.Arcade.Sprite} */
      const platform = this.platforms.create(x, y, 'platform')
      platform.scale = 0.5

      /** @type {Phaser.Physics.Arcade.StaticBody} */
      const body = platform.body
      body.updateFromGameObject()
    }

    /* –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è, "196 == x, 312 == y" –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è) */
    this.player = this.physics.add.sprite(196, 312, 'bunny-stand').setScale(0.5)

    /* –û–±—ä—è–≤–ª—è–µ–º —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –º–æ–∂–µ—Ç —Å—Ç–æ—è—Ç—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ */
    this.physics.add.collider(this.platforms, this.player)

    /* –£–±–∏—Ä–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ down */
    this.player.body.checkCollision.up = false
    this.player.body.checkCollision.left = false
    this.player.body.checkCollision.right = false

    /* –†–∞–±–æ—Ç–∞ —Å –∫–∞–º–µ—Ä–æ–π */
    this.cameras.main.startFollow(this.player)
    this.cameras.main.setDeadzone(this.scale.width * 1.5)

    /* –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ */
    const style = { color: '#000' }
    this.carrotsCollectedText = this.add.text(70, 15, 'Carrots: 0', style)
      .setScrollFactor(0)
      .setOrigin(0.5, 0)

    this.carrotsCollectedWorldRecord = this.add.text(300 , 15, `World Record: ${localStorage.getItem('world-record') || '0'}`, style)
      .setScrollFactor(0)
      .setOrigin(0.5, 0)

    this.goodLuckText = this.add.text(200 , 300, 'GL && HF', style)
      .setOrigin(0.5, 0)

    this.authorText = this.add.text(315 , 595, 'by mioe 2021', style)
      .setOrigin(0.5, 0)

    /* –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –∏ –ø—Ä–∞–≤–∏–ª–æ —á—Ç–æ –æ–±—ä–µ–∫—Ç –º–æ–∂–µ—Ç —Å—Ç–æ—è—Ç—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ */
    this.carrots = this.physics.add.group({
      classType: Carrot,
    })
    this.physics.add.collider(this.platforms, this.carrots)

    /* –õ–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤ */
    this.physics.add.overlap(
      this.player,
      this.carrots,
      // @ts-ignore
      this.handleCollectCarrot, // called on overlap
      undefined,
      this,
    )
  }

  update(t: any, dt: any): void {
    /* –ö–∞—Å–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã */
    const touchingDown = this.player.body.touching.down
    if (touchingDown) {
      this.player.setVelocityY(-300)
      this.player.setTexture('bunny-jump')
      // play jump sound
      this.sound.play('jump')
    }
    /* –ö–æ–≥–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—á–Ω–µ—Ç –ø–∞–¥–∞—Ç—å –≤–Ω–∏–∑ –≤–µ—Ä–Ω—É—Ç—å –µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏–µ stand */
    const vy = this.player.body.velocity.y
    if (vy > 0 && this.player.texture.key !== 'bunny-stand') {
      this.player.setTexture('bunny-stand')
    }

    /* –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∂–∞—Ç—ã—Ö –∫–ª–∞–≤–∏—à */
    if (this.cursors.left.isDown && !touchingDown) {
      this.player.setVelocityX(-200)
    } else if (this.cursors.right.isDown && !touchingDown) {
      this.player.setVelocityX(200)
    } else {
      this.player.setVelocityX(0)
    }

    /* –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–≥–¥–∞ –æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ —ç–∫—Ä–∞–Ω–∞ */
    this.horizontalWrap(this.player)

    /* –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ */
    // @ts-ignore
    this.platforms.children.iterate((child: Phaser.Physics.Arcade.Sprite) => {
      const platform = child
      const scrollY = this.cameras.main.scrollY
      if (platform.y >= scrollY + 700) {
        platform.y = scrollY - Phaser.Math.Between(50, 100)
        platform.body.updateFromGameObject()
        this.addCarrotAbove(platform)
      }
    })

    /* –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ —Å–º–µ–Ω–∞ —Å—Ü–µ–Ω—ã */
    const bottomPlatform = this.findBottomMostPlatform()
    if (this.player.y > bottomPlatform.y + 200) {
      if (localStorage.getItem('world-record')) {
        if (this.carrotsCollected > Number(localStorage.getItem('world-record'))) {
          localStorage.setItem('world-record', String(this.carrotsCollected))
        }
      } else {
        localStorage.setItem('world-record', String(this.carrotsCollected))
      }
      this.scene.start('game-over')
    }
  }

  horizontalWrap(sprite: Phaser.GameObjects.Sprite): void {
    const halfWidth = sprite.displayWidth * 0.5
    const gameWidth = this.scale.width
    if (sprite.x < -halfWidth) {
      sprite.x = gameWidth + halfWidth
    } else if (sprite.x > gameWidth + halfWidth) {
      sprite.x = -halfWidth
    }
  }

  addCarrotAbove(sprite: Phaser.GameObjects.Sprite): Phaser.GameObjects.Sprite {
   const y = sprite.y - sprite.displayHeight
    /** @type {Phaser.Physics.Arcade.Sprite} */
    const carrot = this.carrots.get(sprite.x, y, 'carrot')
    // set active and visible
    carrot.setActive(true)
    carrot.setVisible(true)
    this.add.existing(carrot)
    carrot.body.setSize(carrot.width, carrot.height)
    // make sure body is enabed in the physics world
    this.physics.world.enable(carrot)
    return carrot
  }

  handleCollectCarrot(player: Phaser.GameObjects.Sprite, carrot: Phaser.GameObjects.Sprite): void {
    // hide from display
    this.carrots.killAndHide(carrot)
    // disable from physics world
    // @ts-ignore
    this.physics.world.disableBody(carrot.body)
    // increment by 1
    this.carrotsCollected++
    // create new text value and set it
    const value = `Carrots: ${this.carrotsCollected}`
    this.carrotsCollectedText.text = value
  }

  findBottomMostPlatform(): any {
    const platforms = this.platforms.getChildren()
    let bottomPlatform = platforms[0]
    for (let i = 1; i < platforms.length; ++i){
      const platform = platforms[i]
      // discard any platforms that are above current
      // @ts-ignore
      if (platform.y < bottomPlatform.y) {
        continue
      }
      bottomPlatform = platform
    }
    return bottomPlatform
  }
}
